{"ast":null,"code":"import { HttpRequest } from '@angular/common/http';\nimport { catchError, throwError } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { APPErrors } from 'src/_Error-handler/appError';\nimport { NotFoundError } from 'src/_Error-handler/notFoundError';\nimport { UnauthorizedErrors } from 'src/_Error-handler/unauthorizedErrors';\nimport { JwtHelperService } from \"@auth0/angular-jwt\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/platform-browser\";\nimport * as i3 from \"@angular/router\";\nconst api_path = `${environment.web_URL}/api/users`;\nconst api_file = `${environment.web_URL}/api/image`;\nexport let TeacherAuthService = /*#__PURE__*/(() => {\n  class TeacherAuthService {\n    constructor(http, _sanitize, router) {\n      this.http = http;\n      this._sanitize = _sanitize;\n      this.router = router;\n      this.isLogin = false;\n    }\n\n    registerUser(registerForm) {\n      return this.http.post(`${api_path}/create`, registerForm).pipe(catchError(err => {\n        return throwError(this.errorHandler(err));\n      }));\n      ;\n    }\n\n    loginUser(loginForm, isVerified) {\n      return this.http.post(`${api_path}/login`, loginForm, isVerified).pipe(catchError(err => {\n        return throwError(this.errorHandler(err));\n      }));\n    }\n\n    isLoggedIn() {\n      var loginStatus = localStorage.getItem(\"isLoggedIn\");\n      if (loginStatus === 'true') this.isLogin = true;else this.isLogin = false;\n      return this.isLogin; // return loginStatus == \"true\";\n    }\n\n    onLogout() {\n      this.clearAuthData();\n      this.router.navigate([\"/authenticate/login\"]);\n    }\n\n    clearAuthData() {\n      localStorage.removeItem('id');\n      localStorage.removeItem('name');\n      localStorage.removeItem(\"token\");\n      localStorage.removeItem('role');\n      localStorage.setItem('isLoggedIn', 'false');\n      localStorage.removeItem(\"expiration\");\n    }\n\n    getRoleAdmin() {\n      const role = localStorage.getItem('role');\n      if (role === 'Admin' || 'SuperAdmin') return role;\n      return '';\n    }\n\n    get currentUser() {\n      let token = localStorage.getItem('token');\n      if (!token) return null;\n      let jwtHelper = new JwtHelperService(); // console.log(jwtHelper)\n      // console.log(jwtHelper.decodeToken(token))\n\n      return jwtHelper.decodeToken(token);\n    }\n\n    getUser() {\n      return this.http.get(`${api_path}/`);\n    }\n\n    uniqueEmailCheck(email) {\n      console.log(`${api_path}/userEmail/${email}`);\n      return this.http.get(`${api_path}/userEmail/${email}`);\n    }\n\n    getUserById() {\n      let id = localStorage.getItem('id');\n      return this.http.get(`${api_path}/${id}`);\n    }\n\n    updateUser(body) {\n      // console.log(body)\n      const bodyz = {\n        name: body.name // email: body.email,\n        // username: body.username,\n        // phone: body.phone,\n        // country: body.country\n\n      };\n      let id = localStorage.getItem('id');\n      const path = `${api_path}/update/${id}`; // console.log(bodyz)\n\n      return this.http.patch(path, bodyz);\n    }\n\n    deleteUser() {\n      let id = localStorage.getItem('id');\n      return this.http.delete(`${api_path}/delete/${id}`); //), { headers: headers })\n    }\n\n    verifyEmail(token) {\n      return this.http.get(`${api_path}/confirm/${token}`, {\n        responseType: 'text'\n      });\n    }\n\n    changePassword(changeForm) {\n      let id = localStorage.getItem('id');\n      return this.http.post(`${api_path}/changePassword/${id}`, changeForm);\n    }\n\n    forgotPassword(forgotForm) {\n      return this.http.post(`${api_path}/forgot-password`, forgotForm);\n    }\n\n    resetPassword(userId, token, resetForm) {\n      return this.http.post(`${api_path}/forgot/${userId}/${token}`, resetForm, {\n        responseType: 'text'\n      });\n    }\n\n    requestResetPassword(userId, token) {\n      return this.http.get(`${api_path}/forgot/${userId}/${token}`, {\n        responseType: 'text'\n      });\n    }\n\n    upload(file) {\n      const formData = new FormData();\n      let id = localStorage.getItem('id');\n      formData.append('file', file);\n      const req = new HttpRequest('POST', `${api_file}/upload/${id}`, formData, {\n        reportProgress: true,\n        responseType: 'json'\n      });\n      return this.http.request(req);\n    }\n\n    getFilesByName() {\n      let name = localStorage.getItem('id');\n      return this.http.get(`${api_file}/files/${name}`, {\n        responseType: 'blob'\n      }); // responce type blob\n    }\n\n    getAllFiles() {\n      return this.http.get(`${api_file}/files`);\n    }\n\n    signInWithGoogle(id_token) {\n      return this.http.post(`${api_path}/google`, id_token);\n    }\n\n    errorHandler(error) {\n      if (error.status === 404) throw new NotFoundError();\n      if (error.status === 401) throw new UnauthorizedErrors();\n      throw new APPErrors(error);\n    }\n\n  }\n\n  TeacherAuthService.ɵfac = function TeacherAuthService_Factory(t) {\n    return new (t || TeacherAuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.DomSanitizer), i0.ɵɵinject(i3.Router));\n  };\n\n  TeacherAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TeacherAuthService,\n    factory: TeacherAuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return TeacherAuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}