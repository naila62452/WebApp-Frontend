{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nlet AddTopicComponent = class AddTopicComponent {\n  constructor(topicService, snackbar, route, activityService, router, emailValidator) {\n    this.topicService = topicService;\n    this.snackbar = snackbar;\n    this.route = route;\n    this.activityService = activityService;\n    this.router = router;\n    this.emailValidator = emailValidator; // emailControl = new FormControl('', {\n    //   validators: [Validators.required, Validators.email],\n    //   asyncValidators: this.userService.uniqueEmailValidator(),\n    //   updateOn: 'blur',\n    // });\n    //   private validateUsername(): ValidatorFn {\n    //     return (control: AbstractControl): {[key: string]: any} => {\n    //       this.topicService.topicNameCheck(control)\n    //         .subscribe(res => {\n    //             let response: string = res;\n    //             if (res === control.value) {\n    //               return {'alreadyExist': true};\n    //             } else {\n    //               return null\n    //             }\n    //           },\n    //           (error) => {\n    //             console.log(error);\n    //           }\n    //         )\n    //     }\n    // }\n\n    this.topicForm = new FormGroup({\n      topic: new FormControl(\"\", [Validators.required, Validators.minLength(5), this.emailValidator.existingEmailValidator()]),\n      ageGroup: new FormControl(\"\", [Validators.required]),\n      language: new FormControl(\"\", [Validators.required]),\n      country: new FormControl(\"\", [Validators.required]),\n      grade: new FormControl(\"\", [Validators.required]),\n      noOfQuestions: new FormControl(\"\", [Validators.required]),\n      time: new FormControl(\"\", [Validators.required])\n    });\n    this.searchForm = new FormGroup({\n      search: new FormControl(\"\", [Validators.required])\n    }); // routes = ['/material/mcqs/', this.topics._id]\n\n    this.topic = [];\n    this.searchText = '';\n    this.selectedAge = '';\n    this.age = [];\n    this.language = [];\n    this.country = [];\n    this.grade = [];\n    this.type = [];\n    this.topics = [];\n  }\n\n  ngOnInit() {\n    this.subject = this.route.snapshot.paramMap.get('id'); // this.subId = this.route.snapshot.paramMap.get('id')\n    // localStorage.setItem('subId', this.subId)\n\n    this.topicService.getTopicBySubject(this.subject).subscribe(res => {\n      this.topic = res;\n      console.log('response', res);\n    }, err => {\n      console.log(err);\n    });\n    this.activityService.getGeGroup().subscribe(data => {\n      this.age = data;\n      console.log(data);\n    });\n    this.activityService.getAllLanguage().subscribe(langData => {\n      this.language = langData;\n      console.log(langData);\n    });\n    this.activityService.getCountry().subscribe(countryData => {\n      this.country = countryData;\n      console.log(countryData);\n    });\n    this.activityService.getGrade().subscribe(gradeData => {\n      this.grade = gradeData;\n      console.log(gradeData);\n    });\n    this.activityService.getQuestionType().subscribe(typeData => {\n      this.type = typeData;\n      console.log(typeData);\n    });\n  }\n\n  onSubmit() {\n    console.log(this.topicForm.value);\n    this.subId = this.route.snapshot.paramMap.get('id');\n    this.topicService.addTopic(this.topicForm.value, this.subId, this.topicForm.value.ageGroup).subscribe(res => {\n      this.snackbar.open('Your topic has been posted', 'Ok', {\n        duration: 5000,\n        panelClass: ['blue-snackbar']\n      });\n      this.getTopicByAgeId(this.topicForm.value.ageGroup);\n      this.topicForm.reset();\n      localStorage.setItem('remainingQuestions', '0');\n      this.router.navigate([`/material/type/${res._id}`]);\n    });\n  } // topicAlreadyExist = \"\";\n  // topicNameCheck: any\n  // topicCheckUnique() {\n  //   this.topicService.topicNameCheck(this.topicForm.controls['topic'].value).subscribe(res => {\n  //     this.topicNameCheck = res;\n  //     console.log(this.topicNameCheck)\n  //     if (this.topicNameCheck.length > 0) {\n  //       this.topicAlreadyExist = \"Email Alredy Exist\";\n  //     }\n  //     else {\n  //       this.topicAlreadyExist = \"\";\n  //     }\n  //   });\n  // }\n\n\n  getTopicByAgeId(ageId) {\n    this.subId = this.route.snapshot.paramMap.get('id');\n    this.topicService.getTopicByAgeId(this.subId, ageId).subscribe(res => {});\n  }\n\n  searchData(event) {\n    var text = event.target.value;\n    this.topics = this.topic.filter(x => {\n      return x.topic.toLowerCase().includes(text.toLowerCase());\n    });\n  }\n\n  onDelete(id) {\n    this.topicService.deleteTopic(id).subscribe(res => {\n      this.ngOnInit();\n      this.snackbar.open(\" Your Topic has been Deleted\", \"Ok\", {\n        duration: 5000,\n        panelClass: ['blue-snackbar']\n      });\n    });\n  }\n\n};\nAddTopicComponent = __decorate([Component({\n  selector: 'app-add-topic',\n  templateUrl: './add-topic.component.html',\n  styleUrls: ['./add-topic.component.scss']\n})], AddTopicComponent);\nexport { AddTopicComponent }; // export class ValidateEmail {\n//   static createValidator(topicService: TopicsService) {\n//     return (control: AbstractControl) => {\n//       return topicService.topicNameCheck(control.value).pipe(map(res => {\n//         // return res ? { emailTaken: true } : null;\n//         // I also tried the below if/else statement, but it changes nothing\n//         if(res.length !== 0){\n//           return ({emailTaken: true});\n//         } else {\n//           return (null);\n//         }\n//       }));\n//     }\n//   }\n// }\n// export class ValidateEmail {\n//   topicname: any\n//   static createValidator(topicService: TopicsService) {\n//     return (control: AbstractControl) => {\n//       return topicService.topicNameCheck(control.value).subscribe(res => {\n//          this.topicname = res\n//         if ( !== 0) {\n//           return ({ emailTaken: true });\n//         } else {\n//           return (null);\n//         }\n//       })\n//     }\n//   }\n// }","map":{"version":3,"sources":["C:/Users/Naila Nosheen/Documents/GitHub/WebApp-Frontend/src/app/add-material/add-topic/add-topic.component.ts"],"names":["__decorate","Component","FormControl","FormGroup","Validators","AddTopicComponent","constructor","topicService","snackbar","route","activityService","router","emailValidator","topicForm","topic","required","minLength","existingEmailValidator","ageGroup","language","country","grade","noOfQuestions","time","searchForm","search","searchText","selectedAge","age","type","topics","ngOnInit","subject","snapshot","paramMap","get","getTopicBySubject","subscribe","res","console","log","err","getGeGroup","data","getAllLanguage","langData","getCountry","countryData","getGrade","gradeData","getQuestionType","typeData","onSubmit","value","subId","addTopic","open","duration","panelClass","getTopicByAgeId","reset","localStorage","setItem","navigate","_id","ageId","searchData","event","text","target","filter","x","toLowerCase","includes","onDelete","id","deleteTopic","selector","templateUrl","styleUrls"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\r\nimport { Component } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nlet AddTopicComponent = class AddTopicComponent {\r\n    constructor(topicService, snackbar, route, activityService, router, emailValidator) {\r\n        this.topicService = topicService;\r\n        this.snackbar = snackbar;\r\n        this.route = route;\r\n        this.activityService = activityService;\r\n        this.router = router;\r\n        this.emailValidator = emailValidator;\r\n        // emailControl = new FormControl('', {\r\n        //   validators: [Validators.required, Validators.email],\r\n        //   asyncValidators: this.userService.uniqueEmailValidator(),\r\n        //   updateOn: 'blur',\r\n        // });\r\n        //   private validateUsername(): ValidatorFn {\r\n        //     return (control: AbstractControl): {[key: string]: any} => {\r\n        //       this.topicService.topicNameCheck(control)\r\n        //         .subscribe(res => {\r\n        //             let response: string = res;\r\n        //             if (res === control.value) {\r\n        //               return {'alreadyExist': true};\r\n        //             } else {\r\n        //               return null\r\n        //             }\r\n        //           },\r\n        //           (error) => {\r\n        //             console.log(error);\r\n        //           }\r\n        //         )\r\n        //     }\r\n        // }\r\n        this.topicForm = new FormGroup({\r\n            topic: new FormControl(\"\", [\r\n                Validators.required, Validators.minLength(5), this.emailValidator.existingEmailValidator()\r\n            ]),\r\n            ageGroup: new FormControl(\"\", [\r\n                Validators.required\r\n            ]),\r\n            language: new FormControl(\"\", [\r\n                Validators.required\r\n            ]),\r\n            country: new FormControl(\"\", [\r\n                Validators.required\r\n            ]),\r\n            grade: new FormControl(\"\", [\r\n                Validators.required\r\n            ]),\r\n            noOfQuestions: new FormControl(\"\", [\r\n                Validators.required\r\n            ]),\r\n            time: new FormControl(\"\", [\r\n                Validators.required\r\n            ])\r\n        });\r\n        this.searchForm = new FormGroup({\r\n            search: new FormControl(\"\", [\r\n                Validators.required\r\n            ])\r\n        });\r\n        // routes = ['/material/mcqs/', this.topics._id]\r\n        this.topic = [];\r\n        this.searchText = '';\r\n        this.selectedAge = '';\r\n        this.age = [];\r\n        this.language = [];\r\n        this.country = [];\r\n        this.grade = [];\r\n        this.type = [];\r\n        this.topics = [];\r\n    }\r\n    ngOnInit() {\r\n        this.subject = this.route.snapshot.paramMap.get('id');\r\n        // this.subId = this.route.snapshot.paramMap.get('id')\r\n        // localStorage.setItem('subId', this.subId)\r\n        this.topicService.getTopicBySubject(this.subject)\r\n            .subscribe(res => {\r\n            this.topic = res;\r\n            console.log('response', res);\r\n        }, err => {\r\n            console.log(err);\r\n        });\r\n        this.activityService.getGeGroup()\r\n            .subscribe(data => {\r\n            this.age = data;\r\n            console.log(data);\r\n        });\r\n        this.activityService.getAllLanguage()\r\n            .subscribe(langData => {\r\n            this.language = langData;\r\n            console.log(langData);\r\n        });\r\n        this.activityService.getCountry()\r\n            .subscribe(countryData => {\r\n            this.country = countryData;\r\n            console.log(countryData);\r\n        });\r\n        this.activityService.getGrade()\r\n            .subscribe(gradeData => {\r\n            this.grade = gradeData;\r\n            console.log(gradeData);\r\n        });\r\n        this.activityService.getQuestionType()\r\n            .subscribe(typeData => {\r\n            this.type = typeData;\r\n            console.log(typeData);\r\n        });\r\n    }\r\n    onSubmit() {\r\n        console.log(this.topicForm.value);\r\n        this.subId = this.route.snapshot.paramMap.get('id');\r\n        this.topicService.addTopic(this.topicForm.value, this.subId, this.topicForm.value.ageGroup)\r\n            .subscribe(res => {\r\n            this.snackbar.open('Your topic has been posted', 'Ok', {\r\n                duration: 5000,\r\n                panelClass: ['blue-snackbar']\r\n            });\r\n            this.getTopicByAgeId(this.topicForm.value.ageGroup);\r\n            this.topicForm.reset();\r\n            localStorage.setItem('remainingQuestions', '0');\r\n            this.router.navigate([`/material/type/${res._id}`]);\r\n        });\r\n    }\r\n    // topicAlreadyExist = \"\";\r\n    // topicNameCheck: any\r\n    // topicCheckUnique() {\r\n    //   this.topicService.topicNameCheck(this.topicForm.controls['topic'].value).subscribe(res => {\r\n    //     this.topicNameCheck = res;\r\n    //     console.log(this.topicNameCheck)\r\n    //     if (this.topicNameCheck.length > 0) {\r\n    //       this.topicAlreadyExist = \"Email Alredy Exist\";\r\n    //     }\r\n    //     else {\r\n    //       this.topicAlreadyExist = \"\";\r\n    //     }\r\n    //   });\r\n    // }\r\n    getTopicByAgeId(ageId) {\r\n        this.subId = this.route.snapshot.paramMap.get('id');\r\n        this.topicService.getTopicByAgeId(this.subId, ageId)\r\n            .subscribe(res => {\r\n        });\r\n    }\r\n    searchData(event) {\r\n        var text = event.target.value;\r\n        this.topics = this.topic.filter(x => {\r\n            return (x.topic.toLowerCase()).includes(text.toLowerCase());\r\n        });\r\n    }\r\n    onDelete(id) {\r\n        this.topicService.deleteTopic(id).subscribe(res => {\r\n            this.ngOnInit();\r\n            this.snackbar.open(\" Your Topic has been Deleted\", \"Ok\", {\r\n                duration: 5000,\r\n                panelClass: ['blue-snackbar']\r\n            });\r\n        });\r\n    }\r\n};\r\nAddTopicComponent = __decorate([\r\n    Component({\r\n        selector: 'app-add-topic',\r\n        templateUrl: './add-topic.component.html',\r\n        styleUrls: ['./add-topic.component.scss']\r\n    })\r\n], AddTopicComponent);\r\nexport { AddTopicComponent };\r\n// export class ValidateEmail {\r\n//   static createValidator(topicService: TopicsService) {\r\n//     return (control: AbstractControl) => {\r\n//       return topicService.topicNameCheck(control.value).pipe(map(res => {\r\n//         // return res ? { emailTaken: true } : null;\r\n//         // I also tried the below if/else statement, but it changes nothing\r\n//         if(res.length !== 0){\r\n//           return ({emailTaken: true});\r\n//         } else {\r\n//           return (null);\r\n//         }\r\n//       }));\r\n//     }\r\n//   }\r\n// }\r\n// export class ValidateEmail {\r\n//   topicname: any\r\n//   static createValidator(topicService: TopicsService) {\r\n//     return (control: AbstractControl) => {\r\n//       return topicService.topicNameCheck(control.value).subscribe(res => {\r\n//          this.topicname = res\r\n//         if ( !== 0) {\r\n//           return ({ emailTaken: true });\r\n//         } else {\r\n//           return (null);\r\n//         }\r\n//       })\r\n//     }\r\n//   }\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}